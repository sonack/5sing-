#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from bs4 import BeautifulSoup
import requests
import urllib.parse
import urllib.request
import threading
import random
import pickle
import signal
import json
import html
import time
import math
import sys
import re
import os

sType = {}
sType[0] = 'yc'
sType[1] = 'fc'
sType[2] = 'bz'

rsType = {}
rsType['yc']='1'
rsType['fc']='2'
rsType['bz']='3'

yc = []
fc = []
bz = []
songslist = []

singerNames = {}
singerNames[1] = '井井酱'
singerNames[2] = '封茗囧菌'
singerNames[3] = 'Midaho'

directory = '/home/snk/Music/5sing'
singerName = "未命名"

sess = requests.Session()
headers = {
'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
'Accept-Encoding':'gzip, deflate, sdch',
'Accept-Language':'zh-CN,zh;q=0.8',
'Cache-Control':'max-age=0',
'Connection':'keep-alive',
'Upgrade-Insecure-Requests':'1',
'User-Agent':'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.106 Safari/537.36'
}
sess.headers = headers

def login5sing(update):
    if update:
        print('\n登陆中...')
        loginURL = 'http://5sing.kugou.com/login/'
        login_data = {}
        login_data['txtUserName'] = 'UserName'
        login_data['txtPassword'] = 'PassWord'
        r = sess.post(loginURL,data=login_data)
        if r:
            with open('cookies.dat','wb') as f:
                pickle.dump(sess.cookies,f)
            print('\n更新Cookie成功!\n')
        return r
    else:
        with open('cookies.dat','rb') as f:
            sess.cookies = pickle.load(f)
        if sess.cookies:
                print('\n读取Cookie成功!\n')
        return sess.cookies

def br2gn(s):
    s = s.replace('<br>','\n\t')
    s = s.replace('<br/>','\n\t')
    s = s.replace('<br >','\n\t')
    s = s.replace('<br />','\n\t')
    return s

class Song:
    def __init__(self,name,ID,TY):
        self.name = name
        self.ID = ID
        self.TY = TY
    def __str__(self):
        return self.name;


def getDownloadPath(chooseID):
    position  = os.path.join(directory,singerName)
    #print(position)
    if not os.path.exists(position):
        print('创建文件夹',position,'!')
        os.makedirs(position)
    filePath = os.path.join(position,songslist[chooseID].name)+'.mp3'
    return filePath

def getInfoDict(songID,songType):
    data = {}
    data['songid'] = str(songID)
    data['songtype'] = str(songType)
    url = 'http://5sing.kugou.com/my/songDownload/download'
    r = sess.post(url,data=data)
    bsObj = BeautifulSoup(r.content)
    jsonData = bsObj.p.string
    #print('jsonData',jsonData)
    infoDict = json.loads(jsonData)
    return infoDict

def getDownloadURL(chooseID):
    ID = songslist[chooseID].ID
    TY = songslist[chooseID].TY
    return getInfoDict(ID,TY)['data']['url']


def downloadSongMain(downloadUrl,filename):
    try:
        urllib.request.urlretrieve(downloadUrl,filename)
    except Exception as e:
        print('网络出错...')

def downloadSong(chooseID):
    filename = getDownloadPath(chooseID)
    downloadUrl = getDownloadURL(chooseID)
    if not os.path.exists(filename):
        try:    
            print('正在缓存',downloadUrl,'...')
            t = threading.Thread(target=downloadSongMain,args = (downloadUrl,filename),name='DownloadThread')
            t.start()
        except Exception as e:
            print('下载出错...')
    return filename,downloadUrl

def searchSinger():
    print('================================================================================')
    print('收藏夹:\n')
    for i,x in singerNames.items():
        print(i,":",x)
    singerName = input('\n请输入歌手名称(或者在收藏夹中的编号,默认为1):\t')
    if singerName == "":
        singerName = '1'
    try:
      singerIdx = int(singerName)
      # Default Collections Size Is 30
      if singerIdx < 30:
          singerName = singerNames[singerIdx]
          print('\n你选择了',singerIdx,':',singerName)
    except Exception as e:
        pass 
    params = {}
    params['keyword'] = singerName
    url = 'http://search.5sing.kugou.com/?'+ urllib.parse.urlencode(params)
    r = sess.get(url)
    html = r.content.decode('utf-8')
    rep = r"[\s\S]*?matchInfo = '([\s\S]*?)';[\s\S]*";
    m = re.match(rep,html)
    jsonData = m.group(1);
    searchRes = json.loads(str(jsonData))
    return searchRes

def displaySingerInfo(searchRes):
    name = searchRes['originalName']
    city = searchRes['city']
    style = searchRes['style']
    fans = searchRes['fans']
    popularity = searchRes['popularity']
    totalSong = searchRes['totalSong']
    followed = searchRes['followed']
    description = searchRes['description']
    sex = searchRes['sex']
    ID = searchRes['id']
    print('\n============================================================================\n')
    print('歌手信息如下:')
    print('姓名:\t%s' % name)
    print('性别:\t%s' % '女' if sex else 男)
    print('城市:\t%s' % city)
    print('风格:\t%s' % style)
    print('粉丝数:\t%s' % fans)
    print('人气:\t%s' % popularity)
    print('总歌曲:\t%s' % totalSong)
    if(followed):
        print('已关注')
    else:
        print('未关注')
    print('描述:\n\t%s' % br2gn(html.unescape(description)))
    print('\n\n============================================================================\n')
    return ID,name

def fetchHomePage(ID):
    url = 'http://5sing.kugou.com/' + ID+ '/default.html'
    print('Open Home Page',url)
    #r = sess.get(url)
    #bsObj = BeautifulSoup(r.content)
    os.system('google-chrome ' + url)

def getSongsByUrl(url):
    html = sess.get(url)
    bsObj = BeautifulSoup(html.content)
    songList = bsObj.find('div',{'class':'song_list'})
    songs = songList.findAll('a',{'target':'_blank'})
    realSongs = [songs[x] for x in range(len(songs)) if x%2 == 0]
    for song in realSongs:
        songName = song['title'].strip()
        href = song['href']
        r = re.match(r'http://5sing.kugou.com/(\w+)/(\d+).html',href)
        songaddr = r.groups()
        if songaddr[0] == 'yc':
            yc.append(Song(songName,songaddr[1],rsType[songaddr[0]]))
        elif songaddr[0] == 'fc':
            fc.append(Song(songName,songaddr[1],rsType[songaddr[0]]))
        elif songaddr[0] == 'bz':
            bz.append(Song(songName,songaddr[1],rsType[songaddr[0]]))
        #print(getInfoDict(songaddr[1],rsType[songaddr[0]])

def processList(singerID,i):
    initUrl = 'http://5sing.kugou.com/'+ singerID + '/' + sType[i] + '/1.html'
    html = sess.get(initUrl)
    bsObj = BeautifulSoup(html.content)
    total = bsObj.find('span', {'class':'song_tit_total'}).string
    if i == 0:
        print('原创歌曲:\t'+total)
    elif i == 1:
        print('翻唱歌曲:\t'+total)
    elif i == 2:
        print('伴奏:\t\t'+total)
    totalNum = int(re.match(r'\((\d+)首\)',total).group(1))
    pageNum = math.ceil(totalNum/10)
    if totalNum > 0:
        #print('歌曲列表:')
        for page in range(pageNum):
            url = 'http://5sing.kugou.com/' + singerID + '/' + sType[i] + '/' + str(page+1) + '.html'
            getSongsByUrl(url)

def getAllSongs(ID):
    global songslist
    print('正在获取歌曲......\n')
    for i in range(3):
        processList(ID,i)
    songslist = yc + fc + bz
    print('\n\t\t共' + str(len(songslist)) + '首')

'''
songID = input('请输入歌曲ID: ')
songType = input('请输入歌曲类型: ')
info = getInfoDict(songID,songType)
downloadSong(info['data']['url'])
os.system('play 歌曲1.mp3')
'''

def showSongList():
    print('\n============================================================================')
    print('\t\t\t\t原创')
    print('(共%d首)' % len(yc))
    idx = 0
    for x in yc:
        idx = idx + 1
        print(idx,':',x)
    print('-------------------------------------')
    print('\t\t\t\t翻唱')
    print('(共%d首)' % len(fc))
    for x in fc:
        idx = idx + 1
        print(idx,':',x)
    print('-------------------------------------')
    print('\t\t\t\t伴奏')
    print('(共%d首)' % len(bz))
    for x in bz:
        idx = idx + 1
        print(idx+1,':',x)
    print('============================================================================\n\n')
    
def play_music(filename,url,idx):
    os.system('clear')
    print('Now Playing',os.path.split(filename)[1])
    print('Current Index is ' + str(idx+1) + '.')
    return os.system('play --ignore-length \''+ url + '\'')

# Change into Single Thread to Circle Music(aka. cancel operates)
def circlePlayMusic(idx):
    filename,downloadUrl = downloadSong(idx)
    time.sleep(1)
    return play_music(filename,downloadUrl,idx)
        

def quit(signum,frame):
    os.system('clear')
    print('Bye~')
    sys.exit(0)

if __name__ == '__main__':
    signal.signal(signal.SIGINT,quit)
    signal.signal(signal.SIGTERM,quit)
    os.system('clear')
    update = False
    circle = False
    idx = 0
    if len(sys.argv) > 1 and sys.argv[1] == 'update':
        update = True
    print('================================================================================')
    if login5sing(update):
        print('================================================================================')
        print('\n'+time.strftime("%Y年%m月%d日 %H:%M:%S",time.localtime()) + '\n')
    singerInfo = searchSinger()
    singerID,singerName = displaySingerInfo(singerInfo)
    #fetchHomePage(singerID)
    getAllSongs(singerID)
    showSongList()
    while True:
        leave = False
        while not leave:
            try:
                if not circle:
                    idx = int(input('播放: '))
                    if idx == -1:
                        print('循环播放中...')
                        circle = True
                        idx = random.randint(1,len(songslist))
                        print('Random Start Point @',idx)
                    idx = idx - 1
            except ValueError as e:
                print('请输入正确的值!')
            else:
                leave = True
        if circle:
            for idx in range(idx,len(songslist)):
                circlePlayMusic(idx)
        else:
            circlePlayMusic(idx)
      
        

     
            
        

