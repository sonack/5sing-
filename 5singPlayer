#! /usr/bin/env python3
# -*- coding: utf-8 -*-

from bs4 import BeautifulSoup
import requests
import urllib.parse
import urllib.request
import threading
import random
import pickle
import signal
import json
import html
import time
import math
import sys
import re
import os
import os.path as osp
from os.path import expanduser
import pdb
from progressbar import *


class MyProgressBar():
    def __init__(self):
        self.pbar = None

    def __call__(self, block_num, block_size, total_size):
        if not self.pbar:
            self.pbar=progressbar.ProgressBar(maxval=total_size)
            self.pbar.start()

        downloaded = block_num * block_size
        if downloaded < total_size:
            self.pbar.update(downloaded)
        else:
            self.pbar.finish()


config_dir = expanduser('~/.config/5singPlayer')
# pdb.set_trace()
if not os.path.exists(config_dir):
    print('mkdirs {}'.format(config_dir))
    os.makedirs(config_dir)

cookies_cfg = os.path.join(config_dir, 'cookies.dat')
singer_cfg = os.path.join(config_dir, 'singers.dat')
sType = {}
sType[0] = 'yc'
sType[1] = 'fc'
sType[2] = 'bz'

rsType = {}
rsType['yc']='1'
rsType['fc']='2'
rsType['bz']='3'

yc = []
fc = []
bz = []
songslist = []
errorAllow = 1024
limitTime = 20
singerNames = []

'''
singerNames.append({'name':'井井酱','flag':1})
singerNames.append({'name':'封茗囧菌','flag':1})
singerNames.append({'name':'Midaho','flag':1})
'''

directory = expanduser('~/Music/5sing')
position = directory
singerName = "未命名"
useCacheList = True
CacheName= os.path.join(config_dir, ".5SING_CACHE")
CacheObj = {}
UPDATE_INTERVAL = 24 * 60 * 60  # 1 day time in seconds

sess = requests.Session()
headers = {
'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
'Accept-Encoding':'gzip, deflate, sdch',
'Accept-Language':'zh-CN,zh;q=0.8',
'Cache-Control':'max-age=0',
'Connection':'keep-alive',
'Upgrade-Insecure-Requests':'1',
'User-Agent':'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.106 Safari/537.36'
}
sess.headers = headers

def login5sing(update):
    if update or (not os.path.exists(cookies_cfg)):
        print('\n登陆中...')
        #loginURL = 'http://5sing.kugou.com/login/'
        loginURL = 'http://5sing.kugou.com/m/login.html'
        login_data = {}
        #login_data['txtUserName'] = '18245035112'
        #login_data['txtPassword'] = '5singbofangqi'
        login_data['name'] = '18245035112'
        login_data['pwd'] = '5singbofangqi'
        login_data['remember'] = 'yes'
        r = sess.post(loginURL,data=login_data)
        if r:
            with open(cookies_cfg,'wb') as f:
                pickle.dump(sess.cookies,f)
            print('\n更新Cookie成功!\n')
        return r
    else:
        with open(cookies_cfg,'rb') as f:
            sess.cookies = pickle.load(f)
        if sess.cookies:
                print('\n读取Cookie成功!\n')
        return sess.cookies

def br2gn(s):
    # remove &nbsp;
    s.replace('\xa0',' ')
    space = ['\r','\n','\u3000']
    for rep in space:
        s = s.replace(rep,'')
    replaceList = ['<br>','<br/>','<br >','<br />']
    for rep in replaceList:
        s = s.replace(rep,'\n\t')
    return s

class Song:
    def __init__(self,name,ID,TY):
        self.name = name
        self.ID = ID
        self.TY = TY
    def __str__(self):
        return self.name;


def saveImg():
    global position
    position  = os.path.join(directory,singerName)
    if not os.path.exists(position):
        print('创建文件夹',position,'!')
        os.makedirs(position)
    suffix = os.path.splitext(imageURL)[1]
    imgPath = os.path.join(position,singerName + " 头像 " + suffix)
    if not os.path.exists(imgPath) and imageURL:
        urllib.request.urlretrieve(imageURL,imgPath)
        print('头像下载成功!')

def getDownloadPath(chooseID,ext):
    filePath = os.path.join(position,songslist[chooseID].name) + '.' + ext
    return filePath


'''
def getInfoDict(songID,songType):
    data = {}
    data['songid'] = str(songID)
    data['songtype'] = str(songType)
    url = 'http://5sing.kugou.com/my/songDownload/download'
    r = sess.post(url,data=data)
    bsObj = BeautifulSoup(r.content)
    jsonData = bsObj.p.string
    #print('jsonData',jsonData)
    infoDict = json.loads(jsonData)
    return infoDict


def getDownloadURL(chooseID):
    ID = songslist[chooseID].ID
    TY = songslist[chooseID].TY
    return getInfoDict(ID,TY)['data']['url']
'''

def getSongInfo(songID,songType):
    getSongUrl = 'http://mobileapi.5sing.kugou.com/song/getSongUrl'
    params = {}
    params['songid'] = songID
    params['songtype'] = songType
    res = sess.get(getSongUrl,params = params)
    return json.loads(res.content.decode('UTF8'))['data']


def downloadSongMain(downloadUrl,filename):
  while True:
    try:
    
        urllib.request.urlretrieve(downloadUrl,filename, MyProgressBar())
    except Exception as e:
        continue
    else:
        break
def downloadSong(chooseID):
    songInfo = getSongInfo(songslist[chooseID].ID,songslist[chooseID].TY)
    # Quality Higher, Priority Higher
    songSize = songInfo['sqsize']
    downloadUrl = songInfo['squrl']
    ext = songInfo['sqext']
    if downloadUrl == '':
        downloadUrl = songInfo['hqurl']
        songSize = songInfo['hqsize']
        ext = songInfo['hqext']
        if downloadUrl == '':
            downloadUrl = songInfo['lqurl']
            songSize = songInfo['lqsize']
            ext = songInfo['lqext']
            if downloadUrl == '':
                print('无法解析音乐地址!')
    filename = getDownloadPath(chooseID,ext)
    fn, fn_ext = osp.splitext(osp.basename(filename))
    orig_singer = getLyric(chooseID)
    new_fn = '{}--{}'.format(fn, orig_singer)
    filename = filename.replace(fn, new_fn)

    # print(filename)
    # pdb.set_trace()
    #print(songSize,':',os.path.getsize(filename))

    if (not os.path.exists(filename)) or (int(songSize) - os.path.getsize(filename)) > errorAllow:
        try:
            t = threading.Thread(target=downloadSongMain,args = (downloadUrl,filename),name='DownloadThread')
            t.start()
            print('{}下载中...'.format(new_fn))
            t.join()
            print('{}下载完成!\n'.format(new_fn))

            return filename,downloadUrl
        except Exception as e:
            print('{}下载出错...\n'.format(filename))
    # return filename,filename
    return filename,downloadUrl


def loadCollection():
    global singerNames
    try:
        with open(singer_cfg,'rb') as f:
            singerNames = pickle.load(f)
    except FileNotFoundError as e:
        print('未找到歌手信息文件!')

def saveCollection():
    with open(singer_cfg,'wb') as f:
        pickle.dump(singerNames,f)

def inputSinger():
    global singerName
    print('================================================================================')
    print('你可能想听:\n')
    if len(singerNames) == 0:
        print('列表为空.')
    else:
        for i,x in enumerate(singerNames):
            print(i+1,":",x['name'])
    try:
        singerName = input('\n请输入歌手名称或ID号(以%开头):\t')
    except EOFError:
        quit(None,None)
    
    if singerName == "":
        singerName = '1'
    elif singerName[0] == '%':
        return 2,singerName[1:]
    try:
        singerIdx = int(singerName)
        if abs(singerIdx) <= len(singerNames):
            if singerIdx > 0:
                singerIdx = singerIdx - 1
            singerName = singerNames[singerIdx]['name'] if singerNames[singerIdx]['flag'] == 1 else '%' + singerNames[singerIdx]['id']
            if singerName[0] == '%':
                return 2,singerName[1:]
    except Exception as e:
        pass
    return 1,singerName

def searchSinger(singerName):

    params = {}
    params['keyword'] = singerName
    url = 'http://search.5sing.kugou.com/?'+ urllib.parse.urlencode(params)
    r = sess.get(url)
    html = r.content.decode('utf-8')
    rep = r"[\s\S]*?matchInfo = '([\s\S]*?)';[\s\S]*";
    m = re.match(rep,html)
    jsonData = m.group(1)
    try:
        searchRes = json.loads(str(jsonData))
    except Exception as e:
        print("查无此歌手,请使用ID指定!")
        os._exit(-1)
    return searchRes

def displaySingerInfo(searchRes, searchName):
    global imageURL
    imageURL = searchRes['pictureUrl']
    name = searchRes.get('originalName',searchName)
    city = searchRes['city']
    style = searchRes['style']
    fans = searchRes['fans']
    popularity = searchRes['popularity']
    totalSong = searchRes['totalSong']
    followed = searchRes['followed']
    description = searchRes['description']
    sex = searchRes['sex']
    ID = searchRes['id']

    print('\n============================================================================\n')
    print('歌手信息如下:')
    print('姓名:\t%s' % name)
    print('性别:\t%s' % '女' if sex else '男')
    print('城市:\t%s' % city)
    print('风格:\t%s' % style)
    print('粉丝数:\t%s' % fans)
    print('人气:\t%s' % popularity)
    print('总歌曲:\t%s' % totalSong)
    if(followed):
        print('已关注')
    else:
        print('未关注')
    print('描述:\n\t%s' % re.sub('\[.+?\]|<[^<]+?>', '', br2gn(html.unescape(description))))
    print('\n\n============================================================================\n')
    return ID,name

def fetchHomePage(ID):
    url = 'http://5sing.kugou.com/' + ID+ '/default.html'
    print('Open Home Page',url)
    #r = sess.get(url)
    #bsObj = BeautifulSoup(r.content)
    os.system('google-chrome ' + url)
'''
def getSongsByUrl(url):
    html = sess.get(url)
    bsObj = BeautifulSoup(html.content)
    songList = bsObj.find('div',{'class':'song_list'})
    songs = songList.findAll('a',{'target':'_blank'})
    realSongs = [songs[x] for x in range(len(songs)) if x%2 == 0]
    for song in realSongs:
        songName = song['title'].strip()
        href = song['href']
        r = re.match(r'http://5sing.kugou.com/(\w+)/(\d+).html',href)
        songaddr = r.groups()
        if songaddr[0] == 'yc':
            yc.append(Song(songName,songaddr[1],songaddr[0]))
        elif songaddr[0] == 'fc':
            fc.append(Song(songName,songaddr[1],songaddr[0]))
        elif songaddr[0] == 'bz':
            bz.append(Song(songName,songaddr[1],songaddr[0]))
        #print(getInfoDict(songaddr[1],rsType[songaddr[0]])

def processList(singerID,i):
    initUrl = 'http://5sing.kugou.com/'+ str(singerID) + '/' + sType[i] + '/1.html'
    html = sess.get(initUrl)
    bsObj = BeautifulSoup(html.content)
    total = bsObj.find('span', {'class':'song_tit_total'}).string
    if i == 0:
        print('原创歌曲:\t'+total)
    elif i == 1:
        print('翻唱歌曲:\t'+total)
    elif i == 2:
        print('伴奏:\t\t'+total)
    totalNum = int(re.match(r'\((\d+)首\)',total).group(1))
    pageNum = math.ceil(totalNum/10)
    if totalNum > 0:
        #print('歌曲列表:')
        for page in range(pageNum):
            url = 'http://5sing.kugou.com/' + singerID + '/' + sType[i] + '/' + str(page+1) + '.html'
            getSongsByUrl(url)
'''
def WriteCache(cache_obj):
    print ('写入缓存对象...')
    # print (cache_obj)
    with open(CacheName,'wb') as f:
        pickle.dump(cache_obj, f)

def UpdateCache(singerID):
    global CacheObj
    if not os.path.exists(CacheName):
        return True
    else:
        with open(CacheName, 'rb') as f:
            CacheObj = pickle.load(f)
        if singerID not in CacheObj:
            return True
        else:
            CacheSingerObj = CacheObj[singerID]
            now = time.time()
            if now - CacheSingerObj['last_update_time'] > UPDATE_INTERVAL:
                return True
            else:
                return False


def processListByAPI(singerID,i):
    getUserSongsUrl = 'http://mobileapi.5sing.kugou.com/song/user'
    params = {}
    # params['pagesize'] =
    index = 1
    while True:
        params['pageindex'] = index
        index += 1
        params['userid'] = singerID
        params['songtype'] = sType[i]
        res = sess.get(getUserSongsUrl,params = params)
        allSongs = json.loads(res.content.decode('UTF8'))['data']
        if len(allSongs) == 0:
            break
        for song in allSongs:
            if song['SK'] == 'yc':
                yc.append(Song(song['SN'].strip(),song['ID'],'yc'))
            elif song['SK'] == 'fc':
                fc.append(Song(song['SN'].strip(),song['ID'],'fc'))
            elif song['SK'] == 'bz':
                bz.append(Song(song['SN'].strip(),song['ID'],'bz'))

def getAllSongs(ID):
    global songslist,yc,fc,bz
    yc = []
    fc = []
    bz = []
    print('正在获取歌曲......')
    update = UpdateCache(ID)
    if useCacheList and not update:
        print ('找到缓存歌单......')
        yc = CacheObj[singerID]['yc']
        fc = CacheObj[singerID]['fc']
        bz = CacheObj[singerID]['bz']
    else:
        for i in range(3):
            processListByAPI(ID,i)
            # processList(ID,i)
        if useCacheList:
            CacheSingerObj = {}
            CacheSingerObj['last_update_time'] = time.time()
            CacheSingerObj['yc'] = yc 
            CacheSingerObj['fc'] = fc
            CacheSingerObj['bz'] = bz
            CacheObj[singerID] = CacheSingerObj
            WriteCache(CacheObj)
    songslist = yc + fc + bz
    print('\n\t\t共' + str(len(songslist)) + '首')

'''
songID = input('请输入歌曲ID: ')
songType = input('请输入歌曲类型: ')
info = getInfoDict(songID,songType)
downloadSong(info['data']['url'])
os.system('play 歌曲1.mp3')
'''

def showSongList():
    global bz_start, bz_end
    print('\n============================================================================')
    print('\t\t\t\t原创')
    print('(共%d首)' % len(yc))
    idx = 0
    for x in yc:
        idx = idx + 1
        print(idx,':',x)
    print('-------------------------------------')
    print('\t\t\t\t翻唱')
    print('(共%d首)' % len(fc))
    for x in fc:
        idx = idx + 1
        print(idx,':',x)
    print('-------------------------------------')
    print('\t\t\t\t伴奏')
    print('(共%d首)' % len(bz))
    bz_start = idx
    for x in bz:
        idx = idx + 1
        print(idx,':',x)
    bz_end = idx
    print('============================================================================\n\n')

def play_music(filename,url,idx):
    # 取消注释，即可打开评论和歌词
    try:
        displayComments(idx)
        getLyric(idx)
    except Exception:
        print('获取歌词或评论失败')
    print('当前位置 ' + str(idx+1) + '.')
    print('正在播放',os.path.split(filename)[1] + ' ... ')
    while True:
        startTime = time.time()
        status = os.system('mplayer  -really-quiet \''+ url + '\'')
        endTime = time.time()
        if status or endTime - startTime > limitTime:
            break

def download_all_accompany():
    pdb.set_trace()

# Change into Single Thread to Circle Music(aka. cancel operates)
def circlePlayMusic(idx):
    #print('IDX =',idx)
    if bz_start >= bz_end:
        print('无伴奏!')
    else:
        for idx in range(bz_start, bz_end):
            filename,downloadUrl = downloadSong(idx)
        print('下载完成!')
    # play_music(filename,downloadUrl,idx)


def quit(signum,frame):
    print('\nBye~')
    os._exit(0)

def getLyric(chooseID):
    srcUrl = 'http://5sing.kugou.com/'+ songslist[chooseID].TY + '/' + str(songslist[chooseID].ID) + '.html'
    res = sess.get(srcUrl)
    # content = res.content.decode('UTF8')

    bsObj = BeautifulSoup(res.content, "lxml")
    orig_singer = bsObj.find_all("ul", class_ = "mb15")
    if len(orig_singer) > 0:
        orig_singer = orig_singer[0].li.a.string.strip()
    '''
    lyric = re.match(r'[\s\S]*?<!--lrc-->([\s\S]*?)<!--lrc-->[\s\S]*',content)
    if lyric:
        lyric = lyric.group(1)
        lyric = br2gn(html.unescape(lyric)).strip()
        lyric = re.sub('\[.+?\]|<[^<]+?>', '', lyric)
    # pdb.set_trace()    
    inspire = re.match(r'[\s\S]*?<!--inspiration-->([\s\S]*?)<!--inspiration-->[\s\S]*',content)
    if inspire:
        inspire = inspire.group(1)
        inspire = br2gn(html.unescape(inspire)).strip()
        inspire = re.sub('\[.+?\]|<[^<]+?>', '', inspire)
    pdb.set_trace()
    os.system('clear')
    print('灵感\n\t')
    if not inspire:
        print('\t无')
    else:
        print('\t'+inspire)
    print('\n歌词\n\t')
    if not lyric:
        print('\t无')
    else:
        print('\t'+lyric)
    print('\n============================================================================\n')
    '''
    return orig_singer

def displaySingleComment(comment):
    #print(comment['createTime']+'\t'+comment['user']['NN']+'说:“',comment['content']+'~”')
    tabs = 1
    if '回复@' in comment['content']:
        tabs = 2
    stop = ''
    for i in range(tabs):
        stop += '\t'
    stop += html.unescape(re.sub('\[.+?\]|<[^<]+?>', '', comment['user']['NN'] + ':  “' + comment['content'])) +'~”'
    print(stop)


def getSingerName(singerID):
    global imageURL
    singerInfoUrl = 'http://mobileapi.5sing.kugou.com/user/get'
    params = {'userid':singerID}
    data = json.loads(sess.get(singerInfoUrl,params = params).content.decode('UTF-8'))['data']
    imageURL = data['I']
    return data['NN']


def displayComments(chooseID):
    songid = songslist[chooseID].ID;
    songtype = songslist[chooseID].TY;
    apiUrl = 'http://mobileapi.5sing.kugou.com/comments/list'
    params = {}
    params['rootId'] = songid
    params['rootKind'] = songtype
    params['page'] = 2
    r = sess.get(apiUrl,params =  params)
    commentsObj = json.loads(r.content.decode('UTF8'))
    count = commentsObj['count']
    print('\n============================================================================\n')
    print('评论数 ('+ str(count) + '条)\n')
    commentsObj['data'].reverse()
    for comment in commentsObj['data']:
        displaySingleComment(comment['comments'][0])
    print('\n============================================================================\n')

def selectSinger():
    global singerNames,singerName,singerID,idx
    status,NameOrID = inputSinger()
    if status == 1:
        singerID,singerName = displaySingerInfo(searchSinger(NameOrID), NameOrID)
    elif status == 2:
        singerID = NameOrID
        singerName = getSingerName(singerID)
    #fetchHomePage(singerID)
    singerDict = dict(name = singerName,id = singerID,flag = status)
    if singerDict not in singerNames:
        singerNames.append(singerDict)
        saveCollection()

    saveImg()
    getAllSongs(singerID)
    showSongList()

def openInBrowser(idx):
    songID = songslist[idx].ID
    songType = songslist[idx].TY
    targetUrl = 'http://5sing.kugou.com/' + songType + '/' + str(songID) + '.html'
    os.system('google-chrome -app=' + targetUrl + ' > /dev/null 2>&1 &')

if __name__ == '__main__':

    imageURL = ""
    signal.signal(signal.SIGINT,quit)
    signal.signal(signal.SIGTERM,quit)

    os.system('clear')
    update = False
    circle = False
    if len(sys.argv) > 1 and sys.argv[1] == 'update':
        update = True
    print('================================================================================')
    if login5sing(update):
        print('================================================================================')
        print('\n'+time.strftime("%Y年%m月%d日 %H:%M:%S",time.localtime()) + '\n')
    loadCollection()
    idx = -1
    selectSinger()
    while True:
        leave = False
        while not leave:
            try:
                if not circle:
                    oldidx = idx
                    try:
                        idx = input('\n>>> ')
                    except EOFError:
                        quit(None,None)
                    if len(idx) > 0 and idx[0] == 'x':
                        print('循环播放中...')
                        circle = True
                        if len(idx) == 1:
                            idx = random.randint(1,len(songslist))
                            print('Random Start Point @',idx)
                            idx = idx - 1
                        else:
                            idx = int(idx[1:])
                            print('Specific Start Point @',idx)
                            idx = idx - 1
                    elif idx == 's':
                        idx = -1
                        selectSinger()
                        continue
                    elif idx == 'l':
                        showSongList()
                        continue
                    elif idx == 'o':
                        openInBrowser(oldidx)
                        continue
                    elif idx == 'n' or idx == '':
                        idx = (oldidx + 1) % len(songslist)
                    elif idx == 'p':
                        idx = (oldidx - 1 + len(songslist)) % len(songslist)
                    elif idx == 'd':
                        break
                    else:
                        idx = int(idx)
                        if idx == 0 or abs(idx) > len(songslist):
                            raise ValueError()
                        if idx > 0:
                            idx = idx - 1
            except ValueError as e:
                print('请输入正确的值!')
            else:
                leave = True
        if circle:
            for idx in range(idx,len(songslist)):
                circlePlayMusic(idx)
        else:
            circlePlayMusic(idx)



